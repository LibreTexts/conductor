import { model, Document, Schema } from "mongoose";

export type CommonsModuleConfig = {
  enabled: boolean;
  order: number;
}

export type CommonsModuleSettings = {
  books: CommonsModuleConfig;
  assets: CommonsModuleConfig;
  projects: CommonsModuleConfig;
}

export interface OrganizationInterface extends Document {
  orgID: string;
  name: string;
  domain: string;
  shortName?: string;
  abbreviation?: string;
  aliases?: string[];
  coverPhoto?: string;
  largeLogo?: string;
  mediumLogo?: string;
  smallLogo?: string;
  aboutLink?: string;
  commonsHeader?: string;
  commonsMessage?: string;
  collectionsDisplayLabel?: string;
  collectionsMessage?: string;
  primaryColor?: string;
  footerColor?: string;
  defaultProjectLead?: string;
  addToLibreGridList?: boolean;
  catalogMatchingTags?: string[];
  supportTicketNotifiers?: string[];
  defaultAssetTagFrameworkUUID?: string;
  customOrgList?: string[];
  commonsModules?: CommonsModuleSettings;
  showCollections?: boolean;
}

const OrganizationSchema = new Schema<OrganizationInterface>(
  {
    /**
     * Internal identifier of the Organization.
     */
    orgID: {
      type: String,
      required: true,
    },
    /**
     * Organization's full name.
     */
    name: {
      type: String,
      required: true,
    },
    /**
     * The absolute URL the Organization's Conductor instance is running at.
     */
    domain: {
      type: String,
      required: true,
    },
    /**
     * Organization's shortened name.
     */
    shortName: String,
    /**
     * Abbreviation of the Organization's name.
     */
    abbreviation: String,
    /**
     * Other names the Organization may be referred to by (internal use).
     */
    aliases: [String],
    /**
     * A large "cover photo" representing the Organization.
     */
    coverPhoto: String,
    /**
     * Organization's large/primary logo (URL).
     */
    largeLogo: String,
    /**
     * Organization's medium/secondary logo (URL).
     */
    mediumLogo: String,
    /**
     * Organization's smallest logo or icon (URL).
     */
    smallLogo: String,
    /**
     * An "About" page for the Organization (URL).
     */
    aboutLink: String,
    /**
     * Custom header text to display on the Campus Commons catalog, if desired.
     */
    commonsHeader: String,
    /**
     * Custom welcome text to display on the Campus Commons catalog, if desired.
     */
    commonsMessage: String,
    /**
     * Custom label for collections to display on Campus Commomns (ie Departments, Colleges, etc.)
     */
    collectionsDisplayLabel: String,
    /**
     * Custom welcome text to display on the Campus Collections catalog, if desired.
     */
    collectionsMessage: String,
    /**
     * The hex representation of the Organization's main branding color.
     */
    primaryColor: String,
    /**
     * The hex representation of the Organization's chosen background color for the Commons footer.
     */
    footerColor: String,
    /**
     * The default Lead for autogenerated Projects in the Organization (LibreTexts only, UUID).
     */
    defaultProjectLead: String,
    /**
     * Indicates the Organization's Conductor instance should be listed in the
     * publicly-accessible list of Campus Commons.
     */
    addToLibreGridList: Boolean,
    /**
     * Tags on LibreTexts books used to associate them with the organization.
     */
    catalogMatchingTags: [String],
    /**
     * Emails to notify when a support ticket is created.
     */
    supportTicketNotifiers: [String],
    /**
     * The default Asset Tag Framework for the Organization.
     */
    defaultAssetTagFrameworkUUID: String,
    /**
     * A custom list of Orgs/Campuses to select from in certain contexts.
     */
    customOrgList: [String],
    /**
     * Configuration for the Commons modules.
     */
    commonsModules: {
      type: {
        books: {
          type: {
            enabled: Boolean,
            order: Number,
          },
        },
        assets: {
          type: {
            enabled: Boolean,
            order: Number,
          },
        },
        projects: {
          type: {
            enabled: Boolean,
            order: Number,
          },
        },
      },
    },
    /**
     * Whether to show collections tab on the Commons.
     */
    showCollections: Boolean,
  },
  {
    timestamps: true,
  }
);

OrganizationSchema.virtual("defaultAssetTagFramework", {
  ref: "AssetTagFramework",
  localField: "defaultAssetTagFrameworkUUID",
  foreignField: "uuid",
  justOne: true,
});

const Organization = model<OrganizationInterface>(
  "Organization",
  OrganizationSchema
);

export default Organization;
