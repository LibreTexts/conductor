/**
 * @file Defines a Mongoose schema for storing refresh tokens that external Conductor API
 *  Clients use to generate a fresh Access Token on behalf of a user.
 * @author LibreTexts <info@libretexts.org>
 */
import mongoose from 'mongoose';

const RefreshTokenSchema = new mongoose.Schema({
  /**
   * Token generated by the system.
   */
  token: {
    type: String,
    required: true,
    index: true,
  },
  /**
   * UUID of the user the token was issued on behalf of.
   */
  user: {
    type: String,
    required: true,
  },
  /**
   * Identifier of the external service the token was issued for.
   */
  clientID: {
    type: String,
    required: true,
  },
  /**
   * Resouce/information scope(s) the API Client is authorized to access using this
   * token. Multiple scopes are space-delimited.
   */
  scope: {
    type: String,
    required: true,
  },
  /**
   * Date the token was issued.
   */
  issued: {
    type: Date,
    required: true,
  },
  /**
   * The Date after which the token is no longer valid. The 'expires' property instructs
   * MongoDB to delete the record ASAP after this time, if not done so by the system.
   */
  expiresAt: {
    type: Date,
    required: true,
    expires: 0,
  },
});

const RefreshToken = mongoose.model('RefreshToken', RefreshTokenSchema);

export default RefreshToken;
