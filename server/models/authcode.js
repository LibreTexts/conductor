/**
 * @file Defines a Mongoose schema for storing authorization/authentication codes to connect
 *  users to external services.
 * @author LibreTexts <info@libretexts.org>
 */

import mongoose from 'mongoose';

const AuthCodeSchema = new mongoose.Schema({
  /**
   * The auth code generated by the system.
   */
  code: {
    type: String,
    required: true,
    index: true,
  },
  /**
   * UUID of the user the code was issued for.
   */
  user: {
    type: String,
    required: true,
  },
  /**
   * Identifier of the external service consuming results from the API.
   */
  clientID: {
    type: String,
    required: true,
  },
  /**
   * URI to redirect the user to after the code is issued.
   */
  redirectURI: {
    type: String,
    required: true,
  },
  /**
   * Resouce/information scope(s) the API Client is authorized to access using
   * Access- or RefreshTokens generated from this code. Multiple scopes are space-delimited.
   */
  scope: {
    type: String,
    required: true,
  },
  /**
   * Indicates the user is authorizing an application for the first time or is
   * reauthorizing following scope changes.
   */
  isNewAuth: Boolean,
  /**
   * Date the code was issued.
   */
  issued: {
    type: Date,
    required: true,
  },
  /**
   * The Date after which the code is no longer valid. The 'expires' property instructs
   * MongoDB to delete the record ASAP after this time, if not done so by the system.
   */
  expiresAt: {
    type: Date,
    required: true,
    expires: 0,
  },
});

const AuthCode = mongoose.model('AuthCode', AuthCodeSchema);

export default AuthCode;
